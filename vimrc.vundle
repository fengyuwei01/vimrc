set nocompatible            
filetype off            

set runtimepath+=~/.vim/bundle/Vundle.vim
call vundle#begin()
Plugin 'VundleVim/Vundle.vim'

" theme
Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'
" Plugin 'altercation/vim-colors-solarized'
Plugin 'tomasr/molokai'

" comment
Plugin 'scrooloose/nerdcommenter'

" useful search plugin!
Plugin 'ctrlpvim/ctrlp.vim'

" directory tree
Plugin 'scrooloose/nerdtree'

" go 
Plugin 'fatih/vim-go'

" YCM
Plugin 'Valloric/YouCompleteMe'
Plugin 'vim-scripts/a.vim'

" template
Plugin 'fengzi01/smart-template.vim'
" TODO Plugin 'fengzi01/vim-common'

" awesome bookmark
Plugin 'MattesGroeger/vim-bookmarks'

" maximizer window 
Plugin 'szw/vim-maximizer'

" markdown 
"Plugin 'tpope/vim-markdown'

" close other buffer
" Plugin 'vim-scripts/BufOnly.vim'

" snippet
Plugin 'SirVer/ultisnips'
Plugin 'fengzi01/vim-snippets'

" algin with = or :
Plugin 'godlygeek/tabular'
Plugin 'tpope/vim-fugitive'
Plugin 'majutsushi/tagbar'

Plugin 'dyng/ctrlsf.vim'

Plugin 'terryma/vim-multiple-cursors'

call vundle#end()            
filetype plugin indent on  
"filetype plugin on
"
" :PluginList       - 列出所有已配置的插件
" :PluginInstall    - 安装插件,追加 `!` 用以更新或使用 :PluginUpdate
" :PluginSearch foo - 搜索 foo ; 追加 `!` 清除本地缓存
" :PluginClean      - 清除未使用插件,需要确认; 追加 `!` 自动批准移除未使用插件
"
" 查阅 :h vundle 获取更多细节和wiki以及FAQ

" theme
set background=dark
colorscheme molokai 
" let g:molokai_original = 1
let g:rehash256 = 1
set laststatus=2

" vim-airline
"let g:airline_powerline_fonts = 1
let g:airline_theme='base16_bright'

" 关闭状态显示空白符号计数,这个对我用处不大"
let g:airline#extensions#whitespace#enabled = 0
let g:airline#extensions#whitespace#symbol = '!'

" 是否打开tabline
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#buffer_nr_show = 1

if !exists('g:airline_symbols')
    let g:airline_symbols = {}
endif

" unicode symbols
let g:airline_left_sep = '»'
let g:airline_left_sep = '▶'
let g:airline_right_sep = '«'
let g:airline_right_sep = '◀'
let g:airline_symbols.crypt = '🔒'
"let g:airline_symbols.linenr = '☰'
"let g:airline_symbols.linenr = '␊'
let g:airline_symbols.linenr = '␤'
"let g:airline_symbols.linenr = '¶'
let g:airline_symbols.maxlinenr = ''
"let g:airline_symbols.maxlinenr = '㏑'
let g:airline_symbols.branch = '⎇'
let g:airline_symbols.paste = 'ρ'
"let g:airline_symbols.paste = 'Þ'
"let g:airline_symbols.paste = '∥'
let g:airline_symbols.spell = 'Ꞩ'
let g:airline_symbols.notexists = '∄'
let g:airline_symbols.whitespace = 'Ξ'

let g:airline#extensions#ycm#enabled = 1

" 显示完整路径
function! GetFilePath() 
	let l:file_path = substitute(expand('%:p'),$HOME,"~","g")
	return l:file_path
endfunction
let g:airline_section_c = '%{GetFilePath()}'

" plugin settings ---------------------- {{{

" scrooloose/nerdtree
nnoremap <leader>e :NERDTreeToggle<cr>
let NERDTreeHighlightCursorline=1 
let NERDTreeQuitOnOpen=1
let NERDTreeIgnore=[ '\.pyc$', '\.pyo$', '\.obj$', '\.o$', '\.so$', '\.egg$', '^\.git$', '^\.svn$', '^\.hg$' ]
"close vim if the only window left open is a NERDTree
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | end

" go 
let g:go_disable_autoinstall = 0

" ----------------------------------------------------------------------------
"  " vim-bookmarks
"  "TODO
"  ----------------------------------------------------------------------------
let g:bookmark_auto_save = 1
nnoremap mm :BookmarkToggle<CR>
nnoremap mi :BookmarkAnnotate<CR>
nnoremap ma :BookmarkShowAll<CR>
nnoremap mn :BookmarkNext<CR>
nnoremap mp :BookmarkPrev<CR>
nnoremap mc :BookmarkClear<CR>
nnoremap mx :BookmarkClearAll<CR>

" ----------------------------------------------------------------------------
" tabular
" ----------------------------------------------------------------------------
if exists(":Tabularize")
  nnoremap <C-a> :Tabularize /=<CR>
  vnoremap <C-a> :Tabularize /=<CR>

  nnoremap <Leader>a: :Tabularize /:\zs<CR>
  vnoremap <Leader>a: :Tabularize /:\zs<CR>

  nnoremap <Leader>a=> :Tabularize /=><CR>
  vnoremap <Leader>a=> :Tabularize /=><CR>
endif

"nmap <Leader>=> :Tabularize /=><CR>
"nmap <Leader>a: :Tabularize /:<CR>
"nmap <Leader>a" :Tabularize /"<CR>

" ----------------------------------------------------------------------------
"  " vim-maximizer                                                       
"  "
"  ----------------------------------------------------------------------------
nnoremap <tab> :MaximizerToggle<CR>

" ----------------------------------------------------------------------------
" BufOnly.vim
" ----------------------------------------------------------------------------
"nnoremap <silent> qo :BufOnly<CR>

" ----------------------------------------------------------------------------
" ultisnips
" ----------------------------------------------------------------------------
let g:UltiSnipsExpandTrigger="<C-l>"

" let g:UltiSnipsJumpForwardTrigger="<Tab>"
" let g:UltiSnipsJumpBackwardTrigger="<S-Tab>"

let g:UltiSnipsJumpForwardTrigger="<C-k>"
let g:UltiSnipsJumpBackwardTrigger="<C-b>"

" let g:UltiSnipsListSnippets="<c-e>"

let g:UltiSnipsEditSplit="vertical"

" let g:UltiSnipsSnippetDirectories  = ['snips']
" let g:UltiSnipsSnippetsDir = '~/.vim/snips'

" 进入对应filetype的snippets进行编辑
map <leader>se :UltiSnipsEdit<CR>

" FIX 
" :doautocmd FileType

" YouComleteMe
let g:ycm_use_ultisnips_completer = 1
let g:ycm_global_ycm_extra_conf = '~/.vim/bundle/YouCompleteMe/third_party/ycmd/cpp/ycm/.ycm_extra_conf.py'
let g:ycm_confirm_extra_conf=0 

let g:ycm_autoclose_preview_window_after_completion = 1
let g:ycm_autoclose_preview_window_after_insertion = 1 
let g:ycm_key_list_stop_completion = ['<CR>']

let g:ycm_key_list_select_completion = ['<Tab>', '<Down>']
let g:ycm_key_list_previous_completion = ['<S-Tab>', '<Up>']

let g:ycm_error_symbol = '>!'
" let g:ycm_warning_symbol = '>*'
let g:ycm_warning_symbol = '>*'

let g:ycm_complete_in_comments = 1  "在注释输入中也能补全
let g:ycm_complete_in_strings = 1   "在字符串输入中也能补全
let g:ycm_collect_identifiers_from_comments_and_strings = 1   "注释和字符串中的文字也会被收入补全

" let g:ycm_seed_identifiers_with_syntax = 1
let g:ycm_key_list_stop_completion = ['<C-y>']

let g:ycm_semantic_triggers =  {
            \   'c' : ['->', '.'],
            \   'objc' : ['->', '.'],
            \   'ocaml' : ['.', '#'],
            \   'cpp,objcpp' : ['->', '.', '::'],
            \   'perl' : ['->'],
            \   'php' : ['->', '::', '(', 'use ', 'namespace ', '\'],
            \   'cs,java,typescript,d,python,perl6,scala,vb,elixir,go' : ['.', 're!(?=[a-zA-Z]{3,4})'],
            \   'html': ['<', '"', '</', ' '],
            \   'vim' : ['re![_a-za-z]+[_\w]*\.'],
            \   'ruby' : ['.', '::'],
            \   'lua' : ['.', ':'],
            \   'erlang' : [':'],
            \   'haskell' : ['.', 're!.'],
            \   'scss,css': [ 're!^\s{2,4}', 're!:\s+' ],
            \ }

nnoremap <leader>gl :YcmCompleter GoToDeclaration<CR>
nnoremap <leader>gf :YcmCompleter GoToDefinition<CR>
nnoremap <F6> :YcmCompleter GoToDefinitionElseDeclaration<CR>
nnoremap ff :YcmCompleter FixIt<CR>

" nnoremap <F4> :YcmDiags<CR>

" 自动切换YcmDiags
" 参考 https://github.com/Valloric/ListToggle/blob/master/plugin/listtoggle.vim
function! s:YcmDiagsToggle() abort 
    let l:buffer_count_before = len(filter(range(1, bufnr('$')),'buflisted(v:val)'))

    silent! lclose
    silent! lclose
    
    if len(filter(range(1, bufnr('$')),'buflisted(v:val)')) == l:buffer_count_before
        execute "silent! YcmDiags"
    endif 
endfunction

command! YcmDiagsToggle call s:YcmDiagsToggle()
noremap <F4> :YcmDiagsToggle<CR>

" ctag 工具
" tagbar
nnoremap <leader>t :TagbarToggle<CR>
let g:tagbar_autofocus = 1
let g:tagbar_width = 30

" ctrlpvim/ctrlp.vim
let g:ctrlp_map = '<c-p>'
let g:ctrlp_cmd = 'CtrlP'
let g:ctrlp_root_markers = ['pom.xml', '.p4ignore', 'BCLOUD']  
let g:ctrlp_custom_ignore = {  
  \ 'dir':  '\v[\/](\.(git|hg|svn)|output)$',  
  \ 'file': '\v\.(exe|so|dll|dmg|pdf|word|jpg|gif)$',  
  \ 'link': 'some_bad_symbolic_links',  
  \ }

" ctrlsf
let g:ctrlsf_ackprg = 'rg'
"let g:ctrlsf_default_view_mode = 'compact'
"let g:ctrlsf_position = 'bottom'
"let g:ctrlsf_winsize = '30%'
let g:ctrlsf_ignore_dir = ["output",".git",".svn"]
let g:ctrlsf_mapping = {
            \ "split": "H",
            \ "vsplit": "V",
            \ }
nmap     <C-f> <Plug>CtrlSFPrompt
vmap     <C-f> <Plug>CtrlSFVwordPath
"vmap     <C-f> <Plug>CtrlSFVwordExec
"nmap     <C-F>n <Plug>CtrlSFCwordPath
nmap     <C-F>p <Plug>CtrlSFPwordPath
"nnoremap <C-F>o :CtrlSFOpen<CR>
"nnoremap <C-t> :CtrlSFToggle<CR>
nnoremap <C-o> :CtrlSFOpen<CR>
"inoremap <C-t> <Esc>:CtrlSFToggle<CR>

let g:multi_cursor_use_default_mapping = 0
" Default mapping
let g:multi_cursor_next_key='<C-h>'
let g:multi_cursor_prev_key='<C-l>'
let g:multi_cursor_skip_key='<C-x>'
let g:multi_cursor_quit_key='<esc>'

" a.vim
nnoremap <C-a> :A<CR>

"}}}

